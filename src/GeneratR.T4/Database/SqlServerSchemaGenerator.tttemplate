<#@ template debug="false" hostSpecific="true" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)GeneratR.dll" #>
<#@ assembly name="$(TargetDir)GeneratR.Database.Templates.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GeneratR" #>
<#@ import namespace="GeneratR.DotNet" #>
<#@ import namespace="GeneratR.Database" #>
<#@ import namespace="GeneratR.Database.SqlServer" #>
<#@ import namespace="GeneratR.Database.SqlServer.Templates" #>
<#@ include file="$(TargetDir)GeneratR.T4\Common\FileManager.ttinclude" #>
<#
    return "Compile project, setup configuration and references, copy this file and/or change file extension to .tt, and remove this line to run template.";

	/*
		Settings
	*/
	var connectionString = @"Server=(LocalDB)\MSSQLLocalDB; Database=; Trusted_Connection=true;";
	// Specify path to VS project file - if blank the current project will be used.
	var outputProjectFilePath = @""; 
	var rootOutputFolderPath = @"SqlServerSchemaGeneratorOutput\{schema}";
	var rootSchemaNamespace = @"SqlServerSchemaGeneratorOutput.{schema}";
	var splitFiles = true;
	
	var schemaGeneratorSettings = new SqlServerSchemaGeneratorSettings()
	{
		ConnectionString = connectionString,  
		Table = new SqlServerTableSettings()
        {
            Generate = true,
			OutputProjectPath = outputProjectFilePath,
			OutputFolderPath = Path.Combine(rootOutputFolderPath, "Tables"),
			Namespace = (string.IsNullOrWhiteSpace(rootSchemaNamespace) ? string.Empty : rootSchemaNamespace + ".") + "Tables",
			ClassAsPartial = true,
			InheritClass = "",
			ImplementInterface = "",
			AddConstructor = true,
			AddAnnotations = true,
			GenerateForeignKeys = true,
			GenerateReferencingForeignKeys = true,
			NamingStrategy = NamingStrategy.Singularize,
			ForeignKeyNamingStrategy = ForeignKeyNamingStrategy.Intelligent,
			ForeignKeyCollectionType = ForeignKeyCollectionType.ICollection,
            DefaultColumnDotNetModifier = DotNetModifierKeyword.Public,
            DefaultForeignKeyDotNetModifier = DotNetModifierKeyword.Public | DotNetModifierKeyword.Virtual,
        },
        View = new SqlServerViewSettings()
        {
            Generate = true,
			OutputProjectPath = outputProjectFilePath,
			OutputFolderPath = Path.Combine(rootOutputFolderPath, "Views"),
			Namespace = (string.IsNullOrWhiteSpace(rootSchemaNamespace) ? string.Empty : rootSchemaNamespace + ".") + "Views",
			ClassAsPartial = true,
			InheritClass = "",
			ImplementInterface = "",
			AddConstructor = true,
			AddAnnotations = true,
			NamingStrategy = NamingStrategy.Singularize,
        },
        TableFunction = new SqlServerTableFunctionSettings()
        {
            Generate = true,
			OutputProjectPath = outputProjectFilePath,
			OutputFolderPath = Path.Combine(rootOutputFolderPath, "TableFunctions"),
			Namespace = (string.IsNullOrWhiteSpace(rootSchemaNamespace) ? string.Empty : rootSchemaNamespace + ".") + "TableFunctions",
			AddConstructor = true,
			AddAnnotations = true,
			NamingStrategy = NamingStrategy.Singularize,
        },
        TableType =  new SqlServerTableTypeSettings()
        {
            Generate = true,
            OutputProjectPath = outputProjectFilePath,
			OutputFolderPath = Path.Combine(rootOutputFolderPath, "TableTypes"),
			Namespace = (string.IsNullOrWhiteSpace(rootSchemaNamespace) ? string.Empty : rootSchemaNamespace + ".") + "TableTypes",
            ClassAsPartial = false,
            InheritClass = "",
            ImplementInterface = "",
            AddConstructor = true,
            AddAnnotations = true,
            NamingStrategy = NamingStrategy.Singularize,
        },
        StoredProcedure = new SqlServerStoredProcedureSettings()
        {
            Generate = true,
			OutputProjectPath = outputProjectFilePath,
			OutputFolderPath = Path.Combine(rootOutputFolderPath, "StoredProcedures"),
			Namespace = (string.IsNullOrWhiteSpace(rootSchemaNamespace) ? string.Empty : rootSchemaNamespace + ".") + "StoredProcedures",
			AddConstructor = true,
			AddAnnotations = true,
			GenerateResultSet = true,
			GenerateOutputParameters = true,
			NamingStrategy = NamingStrategy.Singularize,
        },
	};
	
    schemaGeneratorSettings.SchemaObjectRegexIncludes["dbo"] = "";
	// Exclude example
	//schemaGeneratorSettings.SchemaObjectRegexExcludes["RoundhousE"] = ".";
	
	var dotNetGenerator = DotNetGenerator.Create(DotNetLanguageType.CS);
    var schemaGenerator = new SqlServerSchemaGenerator(dotNetGenerator, schemaGeneratorSettings);

    var dbSchema = schemaGenerator.LoadSqlServerDbSchema();

	var fm = FileManager.Create(Host, GenerationEnvironment);
	
	// Lists of generated FQN classes. (namespace + classname)
	var generatedTables = new List<string>();
	var generatedViews = new List<string>();
	var generatedTableFunction = new List<string>();
	var generatedStoredProcedures = new List<string>();
	var generatedTableTypes = new List<string>();

	if (schemaGeneratorSettings.Table.Generate)
    {
		/*  Schema modification examples
		    dbSchema.Tables.GetByName("Asset").GetColumn("Description").AddIncludeAttribute(schemaGenerator.DotNetGenerator.AttributeFactory.Create("AnsiString"));
		    dbSchema.Tables.GetByName("Asset").GetColumn("AssetID").AddExcludeAttribute("Key");
		    dbSchema.Tables.GetByName("Vehicle").InheritClassName = "Asset";
		    dbSchema.Tables.GetByName("Vehicle").GetColumn("AssetID").DotNetModifier = DotNetModifierKeyword.Override;
		    dbSchema.Tables.GetByName("Document", "Production").RenameProperty("Document", "DocumentContent");
			dbSchema.Tables.SelectMany(x => x.Columns).ToList().ForEach(x => x.DotNetModifier = DotNetModifierKeyword.Public | DotNetModifierKeyword.Virtual);
		*/
		foreach (var obj in dbSchema.Tables)
		{
			var objSettings = schemaGenerator.Settings.Table;
			var outputFolderPath = objSettings.OutputFolderPath.Replace("{schema}", obj.DbObject.Schema).Replace("{object}", obj.ClassName);
			var fileProperties = new Dictionary<string, string>();
			fileProperties.Add("ItemType", "Compile");

			fm.StartNewFile(obj.ClassName + dotNetGenerator.FileExtension, objSettings.OutputProjectPath, outputFolderPath, fileProperties);
			var t = new SqlServerTableTemplateCS(obj, schemaGenerator);
			Write(t.Generate());
			fm.EndBlock();
			generatedTables.Add(obj.Namespace + "." + obj.ClassName);
		}
	}

	if (schemaGeneratorSettings.View.Generate)
    {
		foreach (var obj in dbSchema.Views)
		{
			var objSettings = schemaGenerator.Settings.View;
			var outputFolderPath = objSettings.OutputFolderPath.Replace("{schema}", obj.DbObject.Schema).Replace("{object}", obj.ClassName);
			var fileProperties = new Dictionary<string, string>();
			fileProperties.Add("ItemType", "Compile");
			
			fm.StartNewFile(obj.ClassName + dotNetGenerator.FileExtension, objSettings.OutputProjectPath, outputFolderPath, fileProperties);
			var t = new SqlServerViewTemplateCS(obj, schemaGenerator);
			Write(t.Generate());			
			fm.EndBlock();
			generatedViews.Add(obj.Namespace + "." + obj.ClassName);	
		}
	}

	if (schemaGeneratorSettings.TableFunction.Generate)
    {
		foreach (var obj in dbSchema.TableFunctions)
		{
			var objSettings = schemaGenerator.Settings.TableFunction;
			var outputFolderPath = objSettings.OutputFolderPath.Replace("{schema}", obj.DbObject.Schema).Replace("{object}", obj.ClassName);
			var fileProperties = new Dictionary<string, string>();
			fileProperties.Add("ItemType", "Compile");
			
			fm.StartNewFile(obj.ClassName + dotNetGenerator.FileExtension, objSettings.OutputProjectPath, outputFolderPath, fileProperties);
			var t = new SqlServerTableFunctionTemplateCS(obj, schemaGenerator);
			Write(t.Generate());			
			fm.EndBlock();
			generatedTableFunction.Add(obj.Namespace + "." + obj.ClassName);	
		}
	}

	if (schemaGeneratorSettings.StoredProcedure.Generate)
    {
		foreach (var obj in dbSchema.StoredProcedures)
		{
			var objSettings = schemaGenerator.Settings.StoredProcedure;
			var outputFolderPath = objSettings.OutputFolderPath.Replace("{schema}", obj.DbObject.Schema).Replace("{object}", obj.ClassName);
			var fileProperties = new Dictionary<string, string>();
			fileProperties.Add("ItemType", "Compile");
			
			fm.StartNewFile(obj.ClassName + dotNetGenerator.FileExtension, objSettings.OutputProjectPath, outputFolderPath, fileProperties);
			var t = new SqlServerStoredProcedureTemplateCS(obj, schemaGenerator);
			Write(t.Generate());			
			fm.EndBlock();
			generatedTableFunction.Add(obj.Namespace + "." + obj.ClassName);	
		}
	}

	if (schemaGeneratorSettings.TableType.Generate)
    {
		foreach (var obj in dbSchema.TableTypes)
		{
			var objSettings = schemaGenerator.Settings.TableType;
			var outputFolderPath = objSettings.OutputFolderPath.Replace("{schema}", obj.DbObject.Schema).Replace("{object}", obj.ClassName);
			var fileProperties = new Dictionary<string, string>();
			fileProperties.Add("ItemType", "Compile");
			
			fm.StartNewFile(obj.ClassName + dotNetGenerator.FileExtension, objSettings.OutputProjectPath, outputFolderPath, fileProperties);
			var t = new SqlServerTableTypeTemplateCS(obj, schemaGenerator);
			Write(t.Generate());			
			fm.EndBlock();
			generatedTableTypes.Add(obj.Namespace + "." + obj.ClassName);	
		}
	}

	// Generate file(s).
	fm.Process(split: splitFiles, sync: true);
#>

<#+ 
	/// <summary>
	/// Compares the string against a given pattern.
	/// </summary>
	/// <param name="str">The string.</param>
	/// <param name="pattern">The pattern to match, where "*" means any sequence of characters, and "?" means any single character.</param>
	/// <returns><c>true</c> if the string matches the given pattern; otherwise <c>false</c>.</returns>
	public static bool StringLike(string str, string pattern)
	{
		return new Regex(
			"^" + Regex.Escape(pattern).Replace(@"\*", ".*").Replace(@"\?", ".") + "$",
			RegexOptions.IgnoreCase | RegexOptions.Singleline
		).IsMatch(str);
	}
#>
